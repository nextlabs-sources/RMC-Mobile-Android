if (isComponent) {
    apply plugin: 'com.android.application'
}else {
    apply plugin: 'com.android.library'
}

def androidConfig = rootProject.ext.androidConfig
def sdkConfig = rootProject.ext.sdkConfig
def dependencyConfig = rootProject.ext.dependencies

android {
    signingConfigs {
        config {
        }
    }
    compileSdkVersion androidConfig.compileSdkVersion
    defaultConfig {
        minSdkVersion androidConfig.minSdkVersion
        targetSdkVersion androidConfig.targetSdkVersion
        versionCode sdkConfig.versionCode
        versionName sdkConfig.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                // Passes optional arguments to CMake.
                arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=gcc", "-VERBOSE=1"

                // Sets optional flags for the C compiler.
                //cFlags "-D_EXAMPLE_C_FLAG1", "-D_EXAMPLE_C_FLAG2"

                // Sets a flag to enable format macro constants for the C++ compiler.
                cppFlags "-frtti", "-fexceptions", "-std=c++11", "-Wno-narrowing"
            }
        }

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            //abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            abiFilters 'armeabi-v7a', 'arm64-v8a'
            // for everest release only supported 'armeabi-v7a'
//            abiFilters 'armeabi-v7a'
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
        debug {
            jniDebuggable true
        }
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
    sourceSets {
        main {
            // depend on system environment vairalbes
            def SOURCE_ANDROID_OPENSSL_LIB_DIR = "${System.env.SOURCE_ANDROID_3RD_LIBS}/openssl_fips/libs"
            println "debug use to show wheather OPENSSL_LIB_DIR defined: ${SOURCE_ANDROID_OPENSSL_LIB_DIR}"

            jniLibs.srcDirs = ["${SOURCE_ANDROID_OPENSSL_LIB_DIR}"]
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    api dependencyConfig.appcompatv7
    api dependencyConfig.okhttp
    api dependencyConfig.gson
}
